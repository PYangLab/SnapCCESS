---
title: "A example of run SnapCCESS with R"
format: html
author: Lijia
---

## SnapCCESS

SnapCCESS enables you to perform the clustering on multimodality datasets. To learn more about Quarto see [https://github.com/PYangLab/SnapCCESS](https://github.com/PYangLab/SnapCCESS){.uri}.

## Install SnapCCESS in R

To install SnapCCESS, you need to use `remote::install_github`.

```{r}
#| eval: false
remotes::install_github(repo='PYangLab/SnapCCESS',branch='main',subdir='snapccess-r/SnapCCESS')
```

After install SnapCCESS package, we need to install the python dependencies that to run the SnapCCESS in R, for example, the python environment name is SnapCCESS, and I use conda to install the pypi package, and my conda location is `/home/lijiay/miniconda3/condabin/conda`. 

If we don't set up the conda path, by default it will be installed in the R r-miniconda folder.

```{r}
#| eval: false
library(SnapCCESS)
install_SnapCCESS(envname = "SnapCCESS",method = "conda",conda="/home/lijiay/miniconda3/condabin/conda")
```


## Loading all python packages

If you intalled the package successfully, we next need to use the installed environment and load all packages from this environment.

If you are unable to load the modules, please ensure that the SnapCCESS environment is installed on your computer. After confirming its installation, please restart a new Rsession and attempt to load the package once again

```{r}
#| eval: false
reticulate::use_condaenv(condaenv = "SnapCCESS",
                         required=T,
                         conda="/home/lijiay/miniconda3/condabin/conda")
SnapCCESS::loadmodule()
```

## Read the example data and do preprocessing.


```{r}
#| eval: false
rna=read.csv("../in/CITEseq_logRNA.csv.gz",row.names = 1,check.names = F)
adt=read.csv("../in/CITEseq_logADT.csv.gz",row.names = 1,check.names = F)

train=preprocess(x=list(rna,adt),mb_size=64)
```


## Build model

```{r}
#| eval: false
model=build_model(num_features=list(nrow(rna),nrow(adt)),
                  num_hidden_features=list(185,30),
                  num_latent_features=100)
```


## Run SnapCCESS to get embeddings

Here, we propose an example with a total of 10 epochs, divided into 5 cycles, with 2 epochs per cycle.


```{r}
#| eval: false
output=run_SnapCCESS(model,train,
                     epochs=10,epochs_per_cycle=2,
                     save_path="",snapshot=TRUE)

```


## Clustering

```{r}
#| eval: false
clusts=list()
n=1
for(i in output[[3]]){ 
  clusts[[n]]=kmeans(reticulate::py_to_r(i),centers = 4)
  n=n+1
}

consensus_c = clue::cl_consensus(clusts, method = "HE")
consensus = clue::cl_class_ids(consensus_c$.Data)
```